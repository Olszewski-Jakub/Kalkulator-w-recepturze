{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#used-technologies","title":"Used technologies","text":"<ol> <li>Firebase<ul> <li>Analitics</li> <li>Crashlytics</li> <li>Performance Monitoring</li> <li>Remote Config</li> <li>Updating local database on each app start</li> <li>Turing on/off features</li> </ul> </li> </ol>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"docs/","title":"Documentation","text":""},{"location":"docs/#database","title":"Database","text":"<pre><code>graph LR\n  A[Start] --&gt; id1[(Firebase)];\n  id1[(Firebase)] --&gt; id2[Remote Config];\n  id2[Remote Config] --&gt; B{Data fetched};\n  B --&gt; |Yes| C[Convert data];\n  B --&gt; |No| E[End];\n  C --&gt; D[Insert data to local database];\n  D --&gt; E[End];    </code></pre> <p>Function converts JSON object to Map. Mainly used for converting fatched data and saving it in local database. ImportData.kt<pre><code> fun JSONObject.toMap(): Map&lt;String, *&gt; = keys().asSequence().associateWith {\nwhen (val value = this[it]) {\nis JSONArray -&gt; {\nval map = (0 until value.length()).associate { Pair(it.toString(), value[it]) }\nJSONObject(map).toMap().values.toList()\n}\nis JSONObject -&gt; value.toMap()\nJSONObject.NULL -&gt; null\nelse -&gt; value\n}\n}\n</code></pre>"},{"location":"docs/#models","title":"Models","text":"VitAModel.kt<pre><code>data class VitAModel(\nvar id: Int = 0,\nvar company: String = \"\",\nvar density: Double = 0.0,\nvar drops: Int = 0,\nvar mass_units: Double = 0.0\n)\n</code></pre> VitEModel.kt<pre><code>data class VitEModel(\nvar id: Int = 0,\nvar company: String = \"\",\nvar density: Double = 0.0,\nvar drops: Int = 0,\nvar mass_units: Double = 0.0\n)\n</code></pre> VitAD3Model.kt<pre><code>data class VitAD3Model(\nvar id: Int = 0,\nvar density: Double = 0.0,\nvar drops: Int = 0,\n)\n</code></pre> OlejkiModel.kt<pre><code>data class OlejkiModel(\nvar id: Int = 0,\nvar type: String = \"\",\nvar density: Double = 0.0,\nvar drops: Double = 0.0,\n)\n</code></pre> OlejeModel.kt<pre><code>data class OlejeModel(\nvar id: Int = 0,\nvar type: String = \"\",\nvar density: Double = 0.0,\n)\n</code></pre> AlcoholDegreeModel.kt<pre><code>data class AlcoholDegreeModel(\nvar id: Int = 0,\nvar alcohol_degree: String = \"\",\nvar alcohol_volume_degree: Double = 0.0\n)\n</code></pre> AlcoholConcentrationModel.kt<pre><code>data class AlcoholConcentrationModel(\nvar id: Int,\nvar alcohol_concentration: String = \"\",\nvar alcohol_volume: Double = 0.0\n)\n</code></pre>"},{"location":"docs/#vitamin-a","title":"Vitamin A","text":""},{"location":"docs/#calculations","title":"Calculations","text":"VitACalculations.kt<pre><code>    ...\nfun calculate(): Map&lt;String, VitaminAGridModel&gt; {\n//Selecting company (user input)\nwhen (company) {\n0 -&gt; return Hasco()\n1 -&gt; return Medana()\n2 -&gt; return Fagron()\nelse -&gt; {\nLog.d(TAG, \"Company Id outside of range. Couldn't perform calculations\")\n}\n}\n//Return error Map of VitAGridModels to be used in the grid\nreturn mapOf(\n\"Vit1\" to VitaminAGridModel(\nmain_vit = \"Error\",\nmain_vit2 = \"occurred\",\nmass = \"Null\",\nvolume = \"Null\",\ndrops = \"Null\",\nmassunits = \"Null\",\nhowMuchTosell = \"Null\"\n)\n)\n}\n</code></pre> <p>To run calculations user has to select <code>company</code>, <code>unit</code>, <code>amount</code> and pass <code>VitAList</code>. Each company has its own calculations</p> id Company id Unit <code>0</code> Hasco <code>0</code> grams <code>1</code> Medana <code>1</code> mass units <code>2</code> Fragron <code>2</code> milliliters <pre><code>val Vitamins: Map&lt;String, VitaminAGridModel&gt; = VitaminACalculations(\ncompany = 0, units = 1,\namount = 1.0,\nvitAList = vitAList\n).calculate()\n</code></pre>"},{"location":"docs/#vitamin-e","title":"Vitamin E","text":""},{"location":"docs/#vitamin-ad3","title":"Vitamin A+D3","text":""}]}